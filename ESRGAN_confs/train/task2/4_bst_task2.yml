# Using two separate models (with partially shared parameters) to generate
# two set of noisy images, then combine them and train a single super-resolution
# model

#### general settings
name:  4_bst_task2
use_tb_logger: true
model: srgan
distortion: sr
scale: 2
gpu_ids: [0]

#### datasets
datasets:
  train:
    name: train
    mode: LQGT
    dataroot_GT: [
      ./../../datasets/AIM-RWSR/train-clean-images/1x/,
      ./../../datasets/AIM-RWSR/train-clean-images/1x/,
    ]
    dataroot_LQ: [
      ./../../datasets/AIM-RWSR/train-clean-images/task2/2x_degraded_4_0/,
      ./../../datasets/AIM-RWSR/train-clean-images/task2/2x_degraded_4_1/,
    ]
    use_shuffle: true
    n_workers: 3  # per GPU
    batch_size: 32
    GT_size: 128
    use_flip: true
    use_rot: true
    color: RGB
  
  val:
    name: val
    mode: LQGT
    dataroot_GT: ../../datasets/BST/processed/task1/val-gt-clean/1x/
    dataroot_LQ: ../../datasets/BST/processed/task1/val-input-noisy/1x/
    GT_size: 128
    color: RGB

#### network structures
network_G:
  which_model_G: RRDBNet
  in_nc: 3
  out_nc: 3
  nf: 64
  nb: 23
network_D:
  which_model_D: discriminator_vgg_128
  in_nc: 3
  nf: 64

#### path
path:
  results_root: ../ESRGAN_experiments/
  pretrain_model_G: ../../trained_models/RRDB_models/RRDB_PSNR_x4.pth
  strict_load: true
  resume_state: ~

#### training settings: learning rate scheme, loss
train:
  lr_G: !!float 1e-4
  weight_decay_G: 0
  beta1_G: 0.9
  beta2_G: 0.999
  lr_D: !!float 1e-4
  weight_decay_D: 0
  beta1_D: 0.9
  beta2_D: 0.999
  lr_scheme: MultiStepLR

  niter: 30000
  warmup_iter: -1  # no warm up
  lr_steps: [3000, 6000, 12000, 24000]
  lr_gamma: 0.5

  pixel_criterion: l1
  pixel_weight: !!float 1e-2  # 1
  feature_criterion: l1
  feature_weight: 1
  gan_type: ragan  # gan | ragan
  gan_weight: !!float 5e-3

  D_update_ratio: 1
  D_init_iters: 0

  manual_seed: 10
  val_freq: 2500

#### logger
logger:
  print_freq: 100
  save_checkpoint_freq: 2500
